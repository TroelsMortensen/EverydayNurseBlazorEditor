@using EN2Editor.Model.Selection
@using EN2Editor.Model
@using Nodes
@using EN2Editor.Model
@using EN2Editor.Model.Selection
@using System.Reflection.Metadata
@using System.Drawing

@inject SelectionManager selectionManager
@inject NodeModelManager nodeModelManager
@inject IJSRuntime jsRuntime

<div class="diagram-container">
    <div id="CanvasID" class="diagram-canvas"
         @onmousemove="OnMouseMove"
         @onmouseup="OnMouseUp"
         @onmousedown="OnMouseDownCanvas"
         ondragover="event.preventDefault()"
         @ondrop="OnDrop"
         @ref=canvasElement>

        <div class="diagram-html-layer">
            @foreach (NodeModelBase node in nodeModelManager.Nodes) {
                <NodeBase NodeModel="@node" OnDeleteEvent="OnDeleteNode"/>
            }
        </div>

    </div>
</div>

@code {
    protected override async Task OnInitializedAsync() { }
    ElementReference canvasElement;

    private void OnMouseDownCanvas(MouseEventArgs e) { }

    private void OnDeleteNode(NodeModelBase node) {
        nodeModelManager.DeleteNode(node);
        StateHasChanged();
    }

    private async Task OnDrop(MouseEventArgs e) {
        if (selectionManager.IsDraggingToolbarNode) {
            var rectangle = await jsRuntime.InvokeAsync<int[]>("helpers.getBoundingClientRect", "CanvasID");

            nodeModelManager.Nodes.Add(new NodeModelBase {
                X = e.ClientX - rectangle[0], // TODO get width for node and -width/2
                Y = e.ClientY - rectangle[1] 
            });
            selectionManager.IsDraggingToolbarNode = false;
            StateHasChanged();
        }
    }

    private void OnMouseMove(MouseEventArgs e) {
        NodeModelBase node = selectionManager.GrabbedNode;
        if (node == null) return;
        var deltaX = (e.ClientX - selectionManager.LastX);
        var deltaY = (e.ClientY - selectionManager.LastY);
        node.X = deltaX + selectionManager.InitialX;
        node.Y = deltaY + selectionManager.InitialY;
    }

    private void OnMouseUp(MouseEventArgs e) {
        selectionManager.GrabbedNode = null;
    }

}