@namespace EN2Editor.Pages.NodeComponents

@using EN2Editor.Model.Selection
@using Models
@using EN2Editor.Model
@using Models.Components

@inject SelectionManager selectionManager
@inject NodeModelManager nodeModelManager
@inject IJSRuntime jsRuntime
@inject DiagramManager diagramManager

<div>
    <img id="@tsm.ID" src="Icons/TransitionPoint.png" height="16px" style="float:right; margin-right: 2px; cursor:pointer"
         @onmousedown="OnMouseDown"
         @onmousedown:stopPropagation="true"
         draggable="false"/>
</div>

@code {

    [Parameter]
    public TransitionStartModel tsm { get; set; }

    private async Task OnMouseDown(MouseEventArgs evt) {
        Rectangle imgRect = await jsRuntime.InvokeAsync<Rectangle>("helpers.getBoundingClientRectangle", tsm.ID);
        Rectangle canvasRect = await jsRuntime.InvokeAsync<Rectangle>("helpers.getBoundingClientRectangle", "CanvasID");


        // represents the vector from Node coords to port coords
        // hardcoding 6 for image size, to put transition line in the middle
        tsm.OffsetToNodeX = (int) (imgRect.Left - canvasRect.Left) - tsm.Node.X + 6 - diagramManager.PanX;  
        tsm.OffsetToNodeY = (int) (imgRect.Top - canvasRect.Top) - tsm.Node.Y + 7 - diagramManager.PanY;

        LinkModel linkModel = new LinkModel {
            OffsetToCanvasX = canvasRect.Left,
            OffsetToCanvasY = canvasRect.Top,
            TransitionStartModel = tsm
        };

        nodeModelManager.Links.Add(linkModel);
        
        selectionManager.DraggedLink = linkModel;
        selectionManager.InitialX = evt.ClientX;
        selectionManager.InitialY = evt.ClientY;
        selectionManager.LastX = evt.ClientX;
        selectionManager.LastY = evt.ClientY;
    }

}