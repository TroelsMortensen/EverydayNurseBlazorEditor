@using Model.Managers
@using Model.Nodes
@using Model.Components
@using Model
@namespace EN2Editor.Pages.NodeComponents

@inject SelectionManager selectionManager
@inject IJSRuntime jsRuntime
@inject DiagramManager diagramManager

<div>
    <img id="@tem.ID" src="Icons/TransitionPoint.png" height="16px" style="float:left; margin-left: 2px; cursor:pointer; pointer-events:auto"
         @onmouseup="OnMouseUp"
         @onmouseup:stopPropagation="true"
         draggable="false"/>
</div>

@code {

    [Parameter]
    public TransitionEndModel tem { get; set; }

    private async Task OnMouseUp(MouseEventArgs evt) {
        LinkModel linkModel = selectionManager.DraggedLink;
        selectionManager.DraggedLink = null;

        if (linkModel == null) return;
        tem.InComingLink = linkModel;
        Rectangle imgRect = await jsRuntime.InvokeAsync<Rectangle>("helpers.getBoundingClientRectangle", tem.ID);
        Rectangle canvasRect = await jsRuntime.InvokeAsync<Rectangle>("helpers.getBoundingClientRectangle", "CanvasID");

        tem.OffsetToNodeX = (int) (imgRect.Left - canvasRect.Left) - tem.Node.X + 6 - diagramManager.PanX;
        tem.OffsetToNodeY = (int) (imgRect.Top - canvasRect.Top) - tem.Node.Y + 7 - diagramManager.PanY;

        linkModel.TransitionEndModel = tem;

        linkModel.IsEndConnected = true;

    }

}